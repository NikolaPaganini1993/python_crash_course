# Команды if
# Следующий короткий пример показывает, как правильно организовать обработку специальных ситуаций с использованием if.
# Допустим, у вас имеется список машин и вы хотите вывести название каждой машины.
# Названия большинства машин должны записываться с капитализацией (первая буква в верхнем регистре,
# остальные в нижнем). С другой стороны, значение 'bmw' должно записываться в верхнем регистре.
# Следующий код перебирает список названий машин и ищет в нем значение 'bmw'.
# Для всех элементов, содержащих значение 'bmw', значение выводится в верхнем регистре:
cars = ['audi', 'bmw', 'subaru', 'toyota']
for car in cars:
    if car == 'bmw':
        print(car.upper())
    else:
        print(car.title())

# Проверка неравенства
# Если вы хотите проверить, что два значения различны,
# используйте комбинацию из восклицательного знака и знака равенства (!=).
# Восклицательный знак представляет отрицание, как и во многих языках программирования.
# Для знакомства с оператором неравенства мы воспользуемся другой командой if.
# В переменной хранится заказанный топпинг если клиент не заказал анчоусы (anchovies), программа выводит сообщение:
requested_topping = 'mushrooms'
if requested_topping != 'anchovies':
    print("Hold the anchovies!")

# Сравнения чисел
# Также можно проверить условие неравенства двух чисел. Например, следующий
# код выводит сообщение, если значение переменной answer отлично от ожидаемого:
answer = 17
if answer != 42:
    print("That is not the correct answer. Please try again!")

# Проверка нескольких условий
# Иногда требуется проверить несколько условий одновременно. Например, для
# выполнения действия бывает нужно, чтобы истинными были сразу два условия;
# в других случаях достаточно, чтобы истинным было хотя бы одно из двух условий.
# Ключевые слова and и or помогут вам в подобных ситуациях.
# Использование and для проверки нескольких условий
# Чтобы проверить, что два условия истинны одновременно, объедините их ключевым
# словом and; если оба условия истинны, то и все выражение тоже истинно. Если хотя
# бы одно (или оба) условие ложно, то и результат всего выражения равен False.
# Например, чтобы убедиться в том, что каждому из двух людей больше 21 года, используйте следующую проверку:
age1 = 22
age2 = 10
if age1 >= 21 and age2 >= 21:
    print('YES')
else:
    print('NO')

# Проверка вхождения значений в список
# Иногда бывает важно проверить, содержит ли список некоторое значение, прежде чем выполнять действие.
# Например, перед завершением регистрации нового пользователя на сайте можно проверить,
# существует ли его имя в списке имен действующих пользователей, или в картографическом проекте определить,
# входит ли передаваемое место в список известных мест на карте.
# Чтобы узнать, присутствует ли заданное значение в списке, воспользуйтесь ключевым словом in.
# Допустим, вы пишете программу для пиццерии.
# Вы создали список дополнений к пицце, заказанных клиентом, и хотите проверить,
# входят ли некоторые дополнения в этот список.
requested_toppings = ['mushrooms', 'onions', 'pineapple']
if 'mushrooms' in requested_toppings:
    print("True")
else:
    print("False")

# Проверка отсутствия значения в списке
# В других случаях программа должна убедиться в том, что значение не входит
# в список. Для этого используется ключевое слово not. Для примера рассмотрим
# список пользователей, которым запрещено писать комментарии на форуме. Прежде
# чем разрешить пользователю отправку комментария, можно проверить, не был ли
# пользователь включен в черный список:
banned_users = ['andrew', 'carolina', 'david']
user = 'marie'
if user not in banned_users:
    print(f"{user.title()}, you can post a response if you wish.")

# Простые команды if
# Простейшая форма команды if состоит из одного условия и одного действия:
# Допустим, имеется переменная, представляющая возраст человека. Следующий
# код проверяет, что этот возраст достаточен для голосования:
age = 19
if age >= 18:
    print("You are old enough to vote!")

# Команды if-else
# Часто в программе необходимо выполнить одно действие в том случае, если условие истинно,
# и другое действие, если оно ложно. С синтаксисом if-else это
# возможно. Блок if-else в целом похож на команду if, но секция else определяет
# действие или набор действий, выполняемых при неудачной проверке.
# В следующем примере выводится то же сообщение, которое выводилось ранее, если
# возраст достаточен для голосования, но на этот раз при любом другом возрасте
# выводится другое сообщение:
age = 17
if age >= 18:
    print("You are old enough to vote!")
    print("Have you registered to vote yet?")
else:
    print("Sorry, you are too young to vote.")
    print("Please register to vote as soon as you turn 18!")

# Серии блоков elif
# Код может содержать сколько угодно блоков elif.
# Например, если парк аттракционов введет особую скидку для пожилых посетителей, вы можете добавить в свой
# код еще одну проверку для определения того, распространяется ли скидка на текущего посетителя.
# Допустим, посетители возрастом 65 и выше платят половину обычной цены билета, или $40:
age = 12
if age < 4:
    price = 0
    print(f"Your price is ${price}.")
elif age < 18:
    price = 25
    print(f"Your price is ${price}.")
elif age < 65:
    price = 40
    print(f"Your price is ${price}.")
else:
    price = 20
    print(f"Your price is ${price}.")

# Проверка нескольких условий
# Цепочки if-elif-else эффективны, но они подходят в том случае, если истинным
# должно быть только одно условие. Когда Python находит выполняющееся условие,
# все остальные проверки пропускаются. Такое поведение достаточно эффективно,
# потому что оно позволяет проверить одно конкретное условие.
# Однако иногда бывает важно проверить все условия, представляющие интерес.
# В таких случаях следует применять серии простых команд if без блоков elif или
# else. Такое решение уместно, когда истинными могут быть сразу
# несколько условий и вы хотите отреагировать на все истинные.
# Вернемся к примеру с пиццей. Если кто-то закажет пиццу с двумя топпингами,
# программа должна обработать оба топпинга:
# toppings.py
requested_toppings = ['mushrooms', 'extra cheese']
if 'mushrooms' in requested_toppings:
    print("Adding mushrooms.")
if 'pepperoni' in requested_toppings:
    print("Adding pepperoni.")
if 'extra cheese' in requested_toppings:
    print("Adding extra cheese.")

print("\nFinished making your pizza!")

# Проверка специальных значений
# Эта глава началась с простого примера, показывающего, как обрабатывать особые
# значения (такие, как 'bmw'), которые должны выводиться в другом формате по
# сравнению с другими значениями в списке. Теперь, когда вы лучше разбираетесь
# в проверках условий и командах if, давайте повнимательнее рассмотрим процесс
# поиска и обработки особых значений в списке.
# Вернемся к примеру с пиццерией. Программа выводит сообщение каждый раз,
# когда пицца снабжается топпингом в процессе приготовления. Код этого действия
# можно записать чрезвычайно эффективно: нужно создать список топпингов,
# заказанных клиентом, и использовать цикл для перебора всех заказанных:
requested_toppings = ['mushrooms', 'green peppers', 'extra cheese']
for requested_topping in requested_toppings:
    if requested_topping == 'mushrooms':
        print(f'\nSorry, we havent {requested_topping}')
    else:
        print(f"Adding {requested_topping}.")
print("\nFinished making your pizza!")

# Проверка наличия элементов в списке
# Для всех списков, с которыми мы работали до сих пор, действовало одно простое
# предположение: мы считали, что в каждом списке есть хотя бы один элемент. Скоро
# мы предоставим пользователю возможность вводить информацию, хранящуюся
# в списке, поэтому мы уже не можем предполагать, что при каждом выполнении
# цикла в списке есть хотя бы один элемент. В такой ситуации перед выполнением
# цикла for будет полезно проверить, есть ли в списке хотя бы один элемент.
# Проверим, есть ли элементы в списке заказанных топпингов, перед изготовлением
# пиццы. Если список пуст, программа предлагает пользователю подтвердить, что он
# хочет базовую пиццу без топпингов. Если список не пуст, пицца готовится так же,
# как в предыдущих примерах:
requested_toppings = []
if requested_toppings:
    for requested_topping in requested_toppings:
        print(f"Adding {requested_topping}.")
    print("\nFinished making your pizza!")
else:
    print("Are you sure you want a plain pizza?")

# Множественные списки
# Посетители способны заказать что угодно, особенно когда речь заходит о топпингах
# к пицце. Что, если клиент захочет положить на пиццу картофель-фри? Списки
# и команды if позволят вам убедиться в том, что входные данные имеют смысл,
# прежде чем обрабатывать их.
# Давайте проверим наличие нестандартных дополнений перед тем, как готовить
# пиццу. В следующем примере определяются два списка. Первый список содержит
# перечень доступных топпингов, а второй — список топпингов, заказанных клиентом.
# На этот раз каждый элемент из requested_toppings проверяется по списку
# доступных топпингов перед добавлением в пиццу:
available_toppings = ['mushrooms', 'olives', 'green peppers', 'pepperoni', 'pineapple', 'extra cheese']
requested_toppings = ['mushrooms', 'olives', 'french fries']
for requested_topping in requested_toppings:
    if requested_topping in available_toppings:
        print(f"Adding {requested_topping}.")
else:
    print(f"Sorry, we don't have {requested_topping}.")
print("\nFinished making your pizza!")


