# Словари
# В этой главе речь пойдет о словарях — структурах данных, предназначенных для объединения взаимосвязанной информации.
# Простой словарь
# Возьмем игру с инопланетными пришельцами, которые имеют разные цвета и приносят разное количество очков игроку.
# В следующем простом словаре хранится информация об одном конкретном пришельце:
alien_0 = {'color': 'green', 'points': 5}
print(alien_0['color'])
print(alien_0['points'])
# Теперь программа может получить значение, связанное с любым из ключей в alien_0: color или points.
# Если игрок сбивает корабль пришельца, то для получения количества заработанных им очков
# может использоваться код следующего вида:
alien_0 = {'color': 'green', 'points': 5}
new_points = alien_0['points']
print(f"You just earned {new_points} points!")

# Добавление новых пар «ключ-значение»
# Словари относятся к динамическим структурам данных:
# в словарь можно в любой момент добавлять новые пары «ключ-значение».
# Для этого указывается имя словаря, за которым в квадратных скобках следует новый ключ с новым значением.
# Добавим в словарь alien_0 еще два атрибута:
# координаты x и y для вывода изображения пришельца в определенной позиции экрана.
# Допустим, пришелец должен отображаться у левого края экрана, в 25 пикселах от верхнего края.
# Так как система экранных координат обычно располагается в левом верхнем углу, для размещения
# пришельца у левого края координата x должна быть равна 0, а координата y — 25:
alien_0 = {'color': 'green', 'points': 5}
print(alien_0)
alien_0['x_position'] = 0
alien_0['y_position'] = 25
print(alien_0)

# Создание пустого словаря
# В некоторых ситуациях бывает удобно (или даже необходимо) начать с пустого словаря,
# а затем добавлять в него новые элементы.
# Чтобы начать заполнение пустого словаря, определите словарь с пустой парой фигурных скобок,
# а затем добавляйте новые пары «ключ-значение» (каждая пара в отдельной строке).
# Например, вот как строится словарь alien_0:
alien_0 = {}
alien_0['color'] = 'green'
alien_0['points'] = 5
print(alien_0)

# Изменение значений в словаре
# Чтобы изменить значение в словаре, укажите имя словаря с ключом в квадратных скобках,
# а затем новое значение, которое должно быть связано с этим ключом.
# Допустим, в процессе игры цвет пришельца меняется с зеленого на желтый:
alien_0 = {'color': 'green'}
print(f"The alien is {alien_0['color']}.")
alien_0['color'] = 'yellow'
print(f"The alien is now {alien_0['color']}.")

# Рассмотрим более интересный пример: отслеживание позиции пришельца, который
# может двигаться с разной скоростью. Мы сохраним значение, представляющее
# текущую скорость пришельца, и используем его для определения величины горизонтального смещения:
alien_0 = {'x_position': 0, 'y_position': 25, 'speed': 'medium'}
print(f"Original position: {alien_0['x_position']}")
# Пришелец перемещается вправо.
# Вычисляем величину смещения на основании текущей скорости.
if alien_0['speed'] == 'slow':
    x_increment = 1
elif alien_0['speed'] == 'medium':
    x_increment = 2
else:
    x_increment = 3
# Новая позиция равна сумме старой позиции и приращения.
alien_0['x_position'] = alien_0['x_position'] + x_increment
print(f"New position: {alien_0['x_position']}")

# Удаление пар «ключ-значение»
# Когда информация, хранящаяся в словаре, перестает быть нужной,
# пару «ключзначение» можно полностью удалить при помощи команды del.
# При вызове достаточно передать имя словаря и удаляемый ключ.
# Например, в следующем примере из словаря alien_0 удаляется ключ 'points' вместе со значением:
alien_0 = {'color': 'green', 'points': 5}
print(alien_0)
del alien_0['points']
print(alien_0)

# Словарь с однотипными объектами
# В предыдущем примере в словаре сохранялась разнообразная информация об одном объекте (пришельце из компьютерной игры).
# Словарь также может использоваться для хранения одного вида информации о многих объектах.
# Допустим, вы хотите провести опрос среди коллег и узнать их любимый язык программирования.
# Результаты простого опроса удобно сохранить в словаре:
favorite_languages = {
 'jen': 'python',
 'sarah': 'c',
 'edward': 'ruby',
 'phil': 'python',
 }
print(favorite_languages)
language = favorite_languages['sarah'].title()
print(f"Sarah's favorite language is {language}.")

# Обращение к значениям методом get()
# Использование синтаксиса с ключом в квадратных скобках для получения интересующего вас значения из словаря
# имеет один потенциальный недостаток: если запрашиваемый ключ не существует, то вы получите сообщение об ошибке.
# Посмотрим, что произойдет при запросе количества очков для пришельца, для которого оно не задано:
# alien_0 = {'color': 'green', 'speed': 'slow'}
# print(alien_0['points'])
# На экране появляется трассировка с сообщением об ошибке KeyError:
# Конкретно для словарей можно воспользоваться методом get() для назначения
# значения по умолчанию, которое будет возвращено при отсутствии заданного ключа в словаре.
# В первом аргументе метода get() передается ключ.
# Во втором необязательном аргументе можно передать значение, которое должно возвращаться при отсутствии ключа:
alien_0 = {'color': 'green', 'speed': 'slow'}
point_value = alien_0.get('points', 'No point value assigned.')
print(point_value)

# Если ключ 'points' существует в словаре, вы получите соответствующее значение;
# если нет — будет получено значение по умолчанию. В данном случае ключ 'points'
# не существует, поэтому вместо ошибки выводится понятное сообщение:
# No point value assigned.
# Если есть вероятность того, что запрашиваемый ключ не существует, возможно,
# стоит использовать метод get() вместо синтаксиса с квадратными скобками.

# Перебор всех пар «ключ-значение»
# Прежде чем рассматривать разные способы перебора, рассмотрим новый словарь,
# предназначенный для хранения информации о пользователе веб-сайта.
# В следующем словаре хранится имя пользователя, его имя и фамилия:
user_0 = {
    'username': 'efermi',
    'first': 'enrico',
    'last': 'fermi',
    }

# То, что вы уже узнали в этой главе, позволит вам обратиться к любому отдельному атрибуту user_0.
# Но что, если вы хотите просмотреть все данные из словаря этого пользователя?
# Для этого можно воспользоваться перебором в цикле for:
user_0 = {
    'username': 'efermi',
    'first': 'enrico',
    'last': 'fermi',
    }
for key, value in user_0.items():
    print(f"\nKey: {key}")
    print(f"Value: {value}")

# Перебор всех пар «ключ-значение» особенно хорошо работает для таких словарей,
# как в примере favorite_languages.py на с. ___: то есть для словарей, хранящих
# один вид информации со многими разными ключами. Перебрав словарь favorite_
# languages, вы получите имя каждого человека и его любимый язык программирования.
# Так как ключ всегда содержит имя, а значение — язык программирования,
# в цикле вместо имен key и value используются переменные name и language. С таким
# выбором имен читателю кода будет проще следить за тем, что происходит в цикле:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
for name, language in favorite_languages.items():
    print(f"{name.title()}'s favorite language is {language.title()}.")

# Перебор всех ключей в словаре
# Метод keys() удобен в тех случаях, когда вы не собираетесь работать со всеми значениями в словаре.
# Переберем словарь favorite_languages и выведем имена всех людей, участвовавших в опросе:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
for name in favorite_languages.keys():
    print(name.title())

# Перебор всех ключей в словаре
# Метод keys() удобен в тех случаях, когда вы не собираетесь работать со всеми значениями в словаре.
# Переберем словарь favorite_languages и выведем имена всех людей, участвовавших в опросе:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
for name in favorite_languages.keys():
    print(name.title())

# Чтобы обратиться в цикле к значению, связанному с интересующим вас ключом, используйте текущий ключ.
# Для примера выведем для пары друзей сообщение о выбранном ими языке.
# Мы переберем имена в словаре, как это делалось ранее, но когда имя совпадает с именем одного из друзей,
# программа будет выводить специальное сообщение об их любимом языке:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
friends = ['phil', 'sarah']
for name in favorite_languages.keys():
    print(name.title())
    if name in friends:
        language = favorite_languages[name].title()
        print(f"\t{name.title()}, I see you love {language}!")

# Метод keys() также может использоваться для проверки того, участвовал ли конкретный человек в опросе:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
if 'erin' not in favorite_languages.keys():
    print("Erin, please take our poll!")

# Перебор ключей словаря в определенном порядке
# Начиная с Python версии 3.7, перебор содержимого словаря возвращает элементы в том порядке, в каком они вставлялись.
# Тем не менее иногда требуется перебрать элементы словаря в другом порядке.
# Один из способов получения элементов в определенном порядке основан на сортировке ключей, возвращаемых циклом for.
# Для получения упорядоченной копии ключей можно воспользоваться функцией sorted():
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
for name in sorted(favorite_languages.keys()):
    print(f"{name.title()}, thank you for taking the poll.")
# Эта команда for не отличается от других команд for, если не считать того, что
# метод dictionary.keys() заключен в вызов функции sorted().
# Эта конструкция приказывает Python выдать список всех ключей в словаре
# и отсортировать его перед тем, как перебирать элементы.

# Перебор всех значений в словаре
# Если вас интересуют значения, используйте метод values() для получения списка значений без ключей.
# Допустим, вы хотите просто получить список всех языков, выбранных в опросе,
# и вас не интересуют имена людей, выбравших каждый язык:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
    }
print("The following languages have been mentioned:")
for language in favorite_languages.values():
    print(language.title())
# Команда for читает каждое значение из словаря и сохраняет его в переменной language.

# Значения извлекаются из словаря без проверки на возможные повторения.
# Для небольших словарей это может быть приемлемо, но в опросах с большим количеством
# респондентов список будет содержать слишком много дубликатов. Чтобы получить
# список выбранных языков без повторений, можно воспользоваться множеством (set).
# Множество в целом похоже на список, но все его элементы должны быть уникальными:
favorite_languages = {
    'jen': 'python',
    'sarah': 'c',
    'edward': 'ruby',
    'phil': 'python',
}
print("The following languages have been mentioned:")
for language in set(favorite_languages.values()):
    print(language.title())
# Когда список, содержащий дубликаты, заключается в вызов set(), Python находит
# уникальные элементы списка и строит множество из этих элементов.

# Список словарей
# Словарь alien_0 содержит разнообразную информацию об одном пришельце, но
# в нем нет места для хранения информации о втором пришельце, не говоря уже о целом экране, забитом пришельцами.
# Как смоделировать флот вторжения?
# Например, можно создать список пришельцев,
# в котором каждый элемент представляет собой словарь с информацией о пришельце.
# Например, следующий код строит список из трех пришельцев:
alien_0 = {'color': 'green', 'points': 5}
alien_1 = {'color': 'yellow', 'points': 10}
alien_2 = {'color': 'red', 'points': 15}
aliens = [alien_0, alien_1, alien_2]
for alien in aliens:
    print(alien)

# Конечно, в реалистичном примере будут использоваться более трех пришельцев,
# которые будут генерироваться автоматически.
# В следующем примере функция range() создает флот из 30 пришельцев:
# Создание пустого списка для хранения пришельцев.
aliens = []
# Создание 30 зеленых пришельцев.
for alien_number in range(30):
    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
    aliens.append(new_alien)
# Вывод первых 5 пришельцев:
for alien in aliens[:5]:
    print(alien)
print("...")
# Вывод количества созданных пришельцев.
print(f"Total number of aliens: {len(aliens)}")

# Как работать с таким множеством?
# Представьте, что в этой игре некоторые пришельцы изменяют цвет и начинают двигаться быстрее.
# Когда приходит время смены цветов, мы можем воспользоваться циклом for и командой if для изменения цвета.
# Например, чтобы превратить первых трех пришельцев в желтых,
# двигающихся со средней скоростью и приносящих игроку по 10 очков, можно действовать так:
# Создание пустого списка для хранения пришельцев.
aliens = []
# Создание 30 зеленых пришельцев.
for alien_number in range(0, 30):
    new_alien = {'color': 'green', 'points': 5, 'speed': 'slow'}
    aliens.append(new_alien)

for alien in aliens[0:3]:
    if alien['color'] == 'green':
        alien['color'] = 'yellow'
        alien['speed'] = 'medium'
        alien['points'] = 10
# Вывод первых 5 пришельцев:
for alien in aliens[0:5]:
    print(alien)
print("...")

# Список в словаре.
# Вместо того чтобы помещать словарь в список, иногда бывает удобно поместить список в словарь.
# Представьте, как бы вы описали в программе заказанную пиццу.
# Если ограничиться только списком, сохранить удастся разве что список топпингов к пицце.
# При использовании словаря список топпингов может быть всего лишь одним аспектом описания пиццы.
# В следующем примере для каждой пиццы сохраняются два вида информации: основа и список топпингов.
# Список топпингов представляет собой значение, связанное с ключом 'toppings'.
# Чтобы использовать элементы в списке, нужно указать имя словаря и ключ 'toppings',
# как и для любого другого значения в словаре.
# Вместо одного значения будет получен список топпингов:
# Сохранение информации о заказанной пицце.
pizza = {
    'crust': 'thick',
    'toppings': ['mushrooms', 'extra cheese'],
}
# Описание заказа.
print(f"You ordered a {pizza['crust']}-crust pizza with the following toppings:")
for topping in pizza['toppings']:
    print("\t" + topping)

# Словарь в словаре
# Словарь также можно вложить в другой словарь, но в таких случаях код быстро усложняется.
# Например, если на сайте есть несколько пользователей с уникальными именами,
# вы можете использовать имена пользователей как ключи в словаре.
# Информация о каждом пользователе при этом хранится в словаре, который используется как значение, связанное с именем.
# В следующем примере о каждом пользователе хранится три вида информации: имя, фамилия и место жительства.
# Чтобы получить доступ к этой информации, переберите имена пользователей
# и словарь с информацией, связанной с каждым именем:
users = {
    'aeinstein': {
        'first': 'albert',
        'last': 'einstein',
        'location': 'princeton',
        },
    'mcurie': {
        'first': 'marie',
        'last': 'curie',
        'location': 'paris',
        },
}

for username, user_info in users.items():
    print(f"\nUsername: {username}")
    full_name = f"{user_info['first']} {user_info['last']}"
    location = user_info['location']
    print(f"\tFull name: {full_name.title()}")
    print(f"\tLocation: {location.title()}")